<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bt_center</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// constructor
cooldown_total_time = 30 * 10;
cooldown_time = 0;

xscale = 1;
ready = false;
powerup_string= "";
charge_proportion = 0;
owner = noone;

if (x &gt; room_width / 2) {
    owner = global.player2;
    xscale = -1;
} else {
    owner = global.player1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ready) {
    alpha = 0.5;
    cooldown_time = 0;
    ready = false;
    if(powerup_string == "barrier"){
        var barrier = instance_create(0 , 0, obj_barrier);                   
        barrier.owner = owner;
    } else if(powerup_string == "laser"){
        if (ds_map_exists(owner.weapons_map, obj_arma_laser)) {
            // Ya tiene registrada el arma -- upgrade
            var weapon = owner.weapons_map[? obj_arma_laser];
            weapon.reloaded = true;
        } 
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (owner.state == player_state.destroyed) {
    ready = false;
    exit;
}

if(powerup_string == "") {
    exit;
}

if(cooldown_time &gt;= cooldown_total_time){
    ready = true;
} else {
    cooldown_time += 1;
}

charge_proportion = cooldown_time / cooldown_total_time;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// paint button

draw_self();

var mask_width = charge_proportion * sprite_width;

var alpha = 0.5;

if (ready) {
    alpha = 1;
}

draw_sprite_part_ext(spr_bt_center_charge, 0, 0, 0, mask_width, sprite_height, 
    x - xscale * sprite_width / 2,
    y - sprite_height / 2,
    xscale, 1, c_white, alpha);

var charge_percent = floor(charge_proportion * 100);
    
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_space);

draw_text_transformed_colour(x, y, charge_percent, 1, 1, - xscale * 90, c_white, c_white, c_white, c_white, alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
